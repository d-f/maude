*** EPH 12/02/10 
*** - refactor to allow for use of meta level functionality
***
***
*** resource object only keep track a their 'end' attribute (i.e. 'end + 1' is the first time location available to resource clients)
*** the guaranteed presence of an 'end' attribute is taken advantage of in rules: it allows the actual object
*** class to be variable - if needed
***
*** strategy
*** - register tasks currently scheduled (i.e., track assigned) in 'env' object
*** - scheduling rule gate keeper for a task with dependencies is that the task's dependency set
***   is unifyable with the 'currently scheduled tasks' set in 'env'
*** - note that the rule to schedule a task with a single dependency is subsumed by the above strategy
***   => remove the 'single-dep' rule
***
*** state: completed and tested
***
*** roadmap:
*** - support multiple dependencies  DONE
*** - refactor to improve abstraction (e.g., "externalize" track 'from' calculation)  DONE
*** - improve result representation for clarity/readability  DONE
***   e.i., color coding of start/end times, indentation, etc.  DONE
*** - 'specialize' tasks in order to allow for distict approaches to 'duration' calculation
***    e.g., 'fixed', 'proportional', etc.  DONE
*** - refactor to make 'track' an instance of a 'resource'
*** - add support for additional 'resource' types
*** - allow a task to be 'pre-scheduled'; i.e., already tied to a specific resource instance set and time slot
***   prior to starting a search
***   note: this will require tracking resource allocation time slot vs. just resource 'end' time as we are no longer
***         checking a resource's 'end' time to allocate it, but we might approach a resource from underneath, so its
***         'start' time has to be taken into account as well to avoid resource instance over-allocation
*** - define a 'load factor' as part of the assoc between a task and a resource type
***   for a 'track/thread' resource, each task will have the assoc and a load factor of 1
***   but for other resource types this could be different. example:
***   resource type: DB connection
***   task 1: needs 1 DB connection => load factor == 1
***   task 2: needs 3 DB connections => load factor == 3
***   task 3: does not need a DB connection => load factor == 0, or assoc 'entry' for this task - resource type pair is absent
*** - define a 'load factor' as part of the assoc between a task and a resource type
*** - 'externalize' testing framework and test instances
*** - translate 'start' 'end' attributes to time of day
*** - transition to 'full maude' to take advantage of full OO capabilities (subclassing, etc.)?
*** - switch search invocation over to meta-level, allowing capture of results and further processing;
***   e.g., automated constrainst sharpening to automatically find optimal schedule

mod CLASSID is
    inc QID .
    inc CONFIGURATION .
    sort ClassId .
    subsort ClassId < Cid .
endm
view ClassId from TRIV to CLASSID is
    sort Elt to ClassId .
endv

mod OBJECTID is
    inc CONFIGURATION .
    inc QID .
    sort ObjectId .
    subsort Qid < ObjectId < Oid .
endm
view ObjectId from TRIV to OBJECTID is
    sort Elt to ObjectId .
endv


mod CS-EXP-6 is
    pr META-LEVEL .
    inc QID .
    inc CONFIGURATION .

    pr INT .

    inc CLASSID .
    pr SET{ClassId} .

    inc OBJECTID .
    pr SET{ObjectId} .


    sort TaskType .
    op FIXED : -> TaskType .  --- fixed duration
    op PROP : -> TaskType . --- duration proportional to a "master duration" carried in 'env'

    op Connection : -> ClassId [ctor format (m on)] . --- a resoruce of type 'DB connection'
    op Duration : -> ClassId [ctor] .
    op Environment : -> ClassId [ctor] .
    op ResourceDependencies : -> ClassId [ctor] . --- association between a task and a set of resource types it is dependent on
    op Task : -> ClassId [ctor format (m on)] .
    op TaskDependencies : -> ClassId [ctor] . --- association between a task and a set of tasks it is dependent on
    op TaskEnd : -> ClassId [ctor] .
    op Track : -> ClassId [ctor format (m on)] . --- a resource of type 'track/thread'

    --- Env attributes
    op duration-unit :_ : Int -> Attribute [ctor] . --- multiplier for 'proportional' task durations
    op end-ceiling :_ : Int -> Attribute [ctor format (d d b o) gather (&)] .  --- overall completion time
    op scheduled-tasks :_ : Set{ObjectId} -> Attribute [ctor] .  --- currently scheduled tasks
    op task-ends :_ : Configuration -> Attribute [ctor] . --- end times of currently scheduled tasks

    --- Task attributes
    op start :_ : Int -> Attribute [ctor format (d d g o) gather (&)] .
    op duration :_ : Object -> Attribute [ctor] .
    op used-resources :_ : Set{ObjectId} -> Attribute [ctor] .

    --- TaskDep attributes
    op tasks :_ : Set{ObjectId} -> Attribute [ctor] .

    --- Track attributes

    --- Duration attributes
    op type :_ : TaskType -> Attribute [ctor] .
    op factor :_ : Int -> Attribute [ctor] . --- task duration multiplier
    op val :_ : Int -> Attribute [ctor] . --- actual duration (fixed or calculated)

    --- RsrcDeps attributes
    op resources :_ : Set{ClassId} -> Attribute [ctor] . --- types of resources

    --- shared attributes
    op task :_ : ObjectId -> Attribute [ctor] .
    op end :_ : Int -> Attribute [ctor format (d d r o) gather (&)] .


    --- used to bootstrap processing
    op initialize : -> Msg [ctor] .
    --- used to indicate 'prep mode' (i.e. ONLY use prep rules in the presence of a 'prep' msg)
    --- this forces alternation between prep and schedule rule application; this is needed to avoid
    --- multiple consecutive applications of prep rules, which otherwise would result in configurations with multiple
    --- "queued up" schedule messages that would, when used to schedule tasks, result in overlapping tasks
    --- on a single track
    --- in short: this mechanism results in the strict "pairing" of a prep and schedule "invocation"
    op prep : -> Msg [ctor] .
    op schedule-prep : ObjectId Int Int Set{ClassId} Configuration -> Msg [ctor] .
    op schedule : ObjectId Int Int Configuration -> Msg [ctor] .

    --- general rule composition strategies
    --- - unused object attributes are ideally represented by 'A:AttributeSet'
    --- - accumulators - if present - are the last argument in a message specification

    --- carry out initialization on the configuration (if any)
    rl [initialize] :
	initialize
      =>
	prep . --- signal 'prep mode'

    --- rules ---
    --- operational semantics
    --- - always use rules to extract (through unification) a set of objects and/or messages
    ---   as this provides the 'breadth first' search strategy support. therfore: NEVER use
    ---   aux. functions/operator to accomplish this "manually"
    --- scheduling rules ---
    --- strategy:
    --- - iteration is accomplished through tracking a 'collection' as a message argument
    ---   each iteration reduces the collection instance size by 1
    ---   iteration completion is accomplished by unification with 'none'
    ---   note that by virtue of message pattern matching in rules as we attempt to step through
    ---   potentially expected collection member, we force semi-seuenced rule application
    ---   the absence of an 'iteration' completion flag message prevent premature triggering
    ---   of rules not part of the iteration processing operation
    ---
    --- - use messages to accumulate resource instance, duration, etc, info
    --- - use unification on partial multisets to "peel off" resource type labels
    ---   each of which is used in a resource type specific schedule prep rule to
    ---   have rule matching against *current* configuration select a resource instance
    ---   ultimately, the 'empty' resource type dependencies multiset signals completion
    ---   of resource instance selection, thus we can finalize actual scheduling for the *current* task

    --- phase 1: schedule track to a task without pre-task dependency
    --- calc task duration + fetch resource dependencies
    rl [schedule-no-task-deps-prep] :
	prep
	< Tsk:ObjectId : Task | start : -1 , end : -1 ,  duration : DurObj:Object , used-resources : empty  >
 	< 'td : TaskDependencies | task : Tsk:ObjectId , tasks : empty >
 	< 'rd : ResourceDependencies | task : Tsk:ObjectId , resources : RDeps:Set{ClassId} >
	< E:ObjectId : Environment | duration-unit : DurUnit:Int , A:AttributeSet >
    =>
	schedule-prep(Tsk:ObjectId, -1, calc-duration(DurUnit:Int, DurObj:Object), RDeps:Set{ClassId}, none)
	< Tsk:ObjectId : Task | start : -1 , end : -1 ,  duration : DurObj:Object , used-resources : empty  >
 	< 'td : TaskDependencies | task : Tsk:ObjectId , tasks : empty >
 	< 'rd : ResourceDependencies | task : Tsk:ObjectId , resources : RDeps:Set{ClassId} >
	< E:ObjectId : Environment | duration-unit : DurUnit:Int , A:AttributeSet > .

    --- phase 1: schedule track to a task with 1 or more pre-task dependencies
    --- calc task duration + fetch resource dependencies
    crl [schedule-task-deps-prep] :
	prep
	< Tsk:ObjectId : Task | start : -1 , end : -1 ,  duration : DurObj:Object , used-resources : empty  >
 	< 'td : TaskDependencies | task : Tsk:ObjectId , tasks : PreTsks:Set{ObjectId} >
 	< 'rd : ResourceDependencies | task : Tsk:ObjectId , resources : RDeps:Set{ClassId} >
	< E:ObjectId : Environment | duration-unit : DurUnit:Int ,
				scheduled-tasks : (SchedTsks:Set{ObjectId}, PreTsks:Set{ObjectId}) , --- scheduling preconditions met  if 'PreTsks' unifies with a part of 'scheduled-tasks'
				task-ends : TskEnds:Configuration,
				A:AttributeSet >
    =>
	schedule-prep(Tsk:ObjectId, max-taskend-end(-1, PreTsks:Set{ObjectId}, TskEnds:Configuration), calc-duration(DurUnit:Int, DurObj:Object), RDeps:Set{ClassId}, none)
	< Tsk:ObjectId : Task | start : -1 , end : -1 ,  duration : DurObj:Object , used-resources : empty  >
 	< 'td : TaskDependencies | task : Tsk:ObjectId , tasks : PreTsks:Set{ObjectId} >
 	< 'rd : ResourceDependencies | task : Tsk:ObjectId , resources : RDeps:Set{ClassId} >
	< E:ObjectId : Environment | duration-unit : DurUnit:Int ,
				scheduled-tasks : (SchedTsks:Set{ObjectId}, PreTsks:Set{ObjectId}) ,
				task-ends : TskEnds:Configuration,
				A:AttributeSet >
    if PreTsks:Set{ObjectId} =/= empty .

    --- phase 2: determine 'max' across resources and schedule across resources
    --- resource instance selection completed
    rl [schedule-no-resource-prep] :
	schedule-prep(Tsk:ObjectId, MaxTskEnd:Int, TskDur:Int, empty, Rsrcs:Configuration)
      =>
	schedule(Tsk:ObjectId, max(MaxTskEnd:Int, max-resource-end(Rsrcs:Configuration)) + 1, TskDur:Int, Rsrcs:Configuration) .
    --- resource instance selection
    rl [schedule-resource-prep] :
	schedule-prep(Tsk:ObjectId, MaxTskEnd:Int, TskDur:Int, (RDep:ClassId, RDeps:Set{ClassId}), Rsrcs:Configuration)
	< RId:ObjectId : RDep:ClassId | A:AttributeSet >
      =>
	schedule-prep(Tsk:ObjectId, MaxTskEnd:Int, TskDur:Int, RDeps:Set{ClassId} , (< RId:ObjectId : RDep:ClassId | A:AttributeSet > Rsrcs:Configuration ) )
	< RId:ObjectId : RDep:ClassId | A:AttributeSet > .

    --- phase 3: update task to finalize scheduling + signal return to 'prep' mode
    --- resource instance update completed
     rl [schedule-no-resource] :
	schedule(Tsk:ObjectId, TskStart:Int, TskDur:Int, none)
	< Tsk:ObjectId : Task | start : -1 , end : -1 , duration : < 'du : Duration | val : Val:Int , A':AttributeSet > , A'':AttributeSet >
	< E:ObjectId : Environment | end-ceiling : EndCeil:Int ,
				scheduled-tasks : SchedTsks:Set{ObjectId} ,
				task-ends : TskEnds:Configuration ,
				A:AttributeSet >
      =>
	prep --- signal return to 'prep mode'
	< Tsk:ObjectId : Task | start : TskStart:Int , end : (TskStart:Int + TskDur:Int ) - 1 , duration :  < 'du : Duration | val : TskDur:Int , A':AttributeSet > , A'':AttributeSet  >
	< E:ObjectId : Environment | end-ceiling : max( EndCeil:Int, TskStart:Int + TskDur:Int) ,
				scheduled-tasks : (SchedTsks:Set{ObjectId}, Tsk:ObjectId) ,
				task-ends : ( < 'te : TaskEnd | task : Tsk:ObjectId , end : (TskStart:Int + TskDur:Int) - 1 > TskEnds:Configuration ) ,
                                A:AttributeSet > .
    --- update resource instance's end time + add to task as a 'used resource'
    rl [schedule-resource] :
	schedule(Tsk:ObjectId, TskStart:Int, TskDur:Int, < Rid:ObjectId : RDep:ClassId | A:AttributeSet > Rsrcs:Configuration)
 	< Rid:ObjectId : RDep:ClassId | end : E:Int >
	< Tsk:ObjectId : Task | used-resources : RIds:Set{ObjectId} , A':AttributeSet >
      =>
	schedule(Tsk:ObjectId, TskStart:Int, TskDur:Int, Rsrcs:Configuration)
	< Rid:ObjectId : RDep:ClassId | end : (TskStart:Int + TskDur:Int) - 1 >
	< Tsk:ObjectId : Task | used-resources : (Rid:ObjectId, RIds:Set{ObjectId}) , A':AttributeSet > .


    --- determine the max 'end' value in a set of TaskEnd instances
    --- (filtered on the basis of a track's presence in a task list)
    --- note that final/actual start time will also have to take allocated resources' availability time into account
    op max-taskend-end : Int Set{ObjectId} Configuration -> Int .
    eq max-taskend-end(I:Int, Ts:Set{ObjectId}, C:Configuration) =
	max(I:Int, max-taskend-end'(filter-config(Ts:Set{ObjectId}, C:Configuration))) .
    op max-taskend-end' : Configuration -> Int .
    eq max-taskend-end'(C:Configuration) =
	max-taskend-end''(C:Configuration, -1) .
    op max-taskend-end'' : Configuration Int -> Int .
    eq max-taskend-end''(none, M:Int) =
	M:Int .
    eq max-taskend-end''( < 'te : TaskEnd | task : T:ObjectId , end : E:Int > C:Configuration, M:Int) =
	max-taskend-end''(C:Configuration, max(E:Int, M:Int)) .

    op filter-config : Set{ObjectId} Configuration -> Configuration .
    eq filter-config(Ts:Set{ObjectId}, C:Configuration) =
	filter-config'(Ts:Set{ObjectId}, C:Configuration, none) .
    op filter-config' : Set{ObjectId} Configuration Configuration -> Configuration .
    eq filter-config'( T:ObjectId, ( < TE:ObjectId : TaskEnd | task : T:ObjectId , end : E:Int > C':Configuration), C:Configuration) =
	< TE:ObjectId : TaskEnd | task : T:ObjectId , end : E:Int > C:Configuration .
    eq filter-config'( (T:ObjectId, Ts:Set{ObjectId}), ( < TE:ObjectId : TaskEnd | task : T:ObjectId , end : E:Int > C':Configuration), C:Configuration) =
	filter-config'(Ts:Set{ObjectId}, C':Configuration, ( < TE:ObjectId : TaskEnd | task : T:ObjectId , end : E:Int > C:Configuration)) .
	
    --- calculate task duration on the basis of duration type and appropriate additional data
    op calc-duration : Int Object -> Int .
    eq calc-duration(D:Int, < 'du : Duration | type : PROP , factor : F:Int , val : V:Int > ) =
	D:Int * F:Int .
    eq calc-duration(D:Int, < 'du : Duration | type : FIXED , val : V:Int > ) = 
	V:Int .

    --- determine the max 'end' value in a set of resource instances
    op max-resource-end : Configuration -> Int .
    eq max-resource-end(C:Configuration) = 
	max-resource-end'(C:Configuration, -1) .
    op max-resource-end' : Configuration Int -> Int .
    eq max-resource-end'(none, M:Int) = 
	M:Int .
    eq max-resource-end'( < O:ObjectId : CL:ClassId | end : E:Int > C:Configuration, M:Int) =
	max-resource-end'(C:Configuration, max(E:Int, M:Int)) .
 
endm

***** unit + integration tests *****

mod CS-EXP-6-UNIT-TESTS is
    inc CS-EXP-6 .
    ---inc META-LEVEL .


    op test-taskends-config : -> Configuration [ctor] .
    eq test-taskends-config =
	< 'te : TaskEnd | task : 'T123 , end : 123 >
	< 'te : TaskEnd | task : 'T42 , end : 42 >
	< 'te : TaskEnd | task : 'T2 , end : 2 >
	< 'te : TaskEnd | task : 'T1 , end : 1 >
	< 'te : TaskEnd | task : 'T4 , end : 4 >
	< 'te : TaskEnd | task : 'T3 , end : 3 > .

    op test-tasks : -> Set{ObjectId} [ctor] .
    eq test-tasks =
	'T1, 'T2, 'T3, 'T42 .

    op test-config-nodeps : -> Configuration .
    eq test-config-nodeps =
	< 'e : Environment | duration-unit : 4 , end-ceiling : -1 , scheduled-tasks : empty , task-ends : none >

	--- resources
	< 'trackA : Track | end : -1 >
	< 'trackB : Track | end : -1 >

	< 'conn1 : Connection | end : -1 >

	--- tasks
	< 'task1 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 7 > , used-resources : empty >
	< 'task2 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 8 > , used-resources : empty > 
	< 'task3 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : PROP , factor : 3 , val : -1 >  , used-resources : empty >
	--- dependencies
	< 'td : TaskDependencies | task : 'task1 , tasks : empty >
	< 'td : TaskDependencies | task : 'task2 , tasks : empty >
	< 'td : TaskDependencies | task : 'task3 , tasks : empty > 

	< 'rd : ResourceDependencies | task : 'task1 , resources : Track >
	< 'rd : ResourceDependencies | task : 'task2 , resources : Track >
	< 'rd : ResourceDependencies | task : 'task3 , resources : (Track, Connection) > .


    op test-config-deps : -> Configuration .
    eq test-config-deps =
	< 'e : Environment | duration-unit : 4 , end-ceiling : -1 , scheduled-tasks : empty , task-ends : none >

	--- resources
	< 'trackA : Track | end : -1 >
	< 'trackB : Track | end : -1 >

	< 'conn1 : Connection | end : -1 >

	--- tasks
	< 'task1 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 7 > , used-resources : empty >
	< 'task2 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 8 > , used-resources : empty > 
	< 'task3 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : PROP , factor : 3 , val : -1 >  , used-resources : empty >
	< 'task4 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 7 > , used-resources : empty >
	< 'task5 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 8 > , used-resources : empty >
	< 'task6 : Task | start : -1 , end : -1 , duration : < 'du : Duration | type : FIXED , val : 2 > , used-resources : empty >

	--- dependencies
	< 'td : TaskDependencies | task : 'task1 , tasks : empty >
	< 'td : TaskDependencies | task : 'task2 , tasks : empty >
	< 'td : TaskDependencies | task : 'task3 , tasks : ('task1, 'task2) > 
	< 'td : TaskDependencies | task : 'task4 , tasks : 'task1 > 
	< 'td : TaskDependencies | task : 'task5 , tasks : 'task3 > 
	< 'td : TaskDependencies | task : 'task6 , tasks : 'task1 > 

	< 'rd : ResourceDependencies | task : 'task1 , resources : (Track, Connection) >
	< 'rd : ResourceDependencies | task : 'task2 , resources : Track >
	< 'rd : ResourceDependencies | task : 'task3 , resources : (Track, Connection) >
	< 'rd : ResourceDependencies | task : 'task4 , resources : Track >
	< 'rd : ResourceDependencies | task : 'task5 , resources : Track >
	< 'rd : ResourceDependencies | task : 'task6 , resources : Track > .

endm



*** *** test max-taskend-end operator
*** red max-taskend-end(
***     < 'te : TaskEnd | task : 'T1 , end : 12 >
***     < 'te : TaskEnd | task : 'T2 , end : 42 >
***     < 'te : TaskEnd | task : 'T3 , end : 7 > ) .

*** test filter-config operator
red in CS-EXP-6-UNIT-TESTS : filter-config(
  test-tasks,
  test-taskends-config ) .

red max-taskend-end(7, test-tasks, test-taskends-config) .

*** **** example "resolutions" ****

*** *** basic 'rewrite'
*** rew test-config .

*** *** search for all solutions ***
*** search test-config-nodep =>! C:Configuration .
*** search test-config-1dep =>! C:Configuration .
*** search test-config-2deps =>! C:Configuration .

*** search for a solution matching a particular constraint ***
*** search test-config-1dep =>! C:Configuration < 'Task1 : Task | A:AttributeSet , track : TrackId:ObjectId > such that TrackId:ObjectId = 'TrackB .
*** search [1] in CS-EXP-6-UNIT-TESTS : test-config-2deps =>! C:Configuration .
*** search [1] in CS-EXP-6-UNIT-TESTS : test-config-2deps =>! C:Configuration < 'Env : Environment | A:AttributeSet,end-ceiling : FC:Int > such that FC:Int < 20 = true .

*** search [1] in CS-EXP-6-UNIT-TESTS : initialize test-config-deps =>! C:Configuration < 'e : Environment | A:AttributeSet,end-ceiling : FC:Int > such that FC:Int <= 1000 = true .



