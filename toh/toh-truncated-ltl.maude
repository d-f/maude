***
*** Tower Of Hanoi
***
*** LTL version - based on truncated search
*** 
*** E.Honing oct 2013
***
in model-checker.maude

fmod RUNSTATE is
    sort RunState .
endfm

view RunState from TRIV to RUNSTATE is
    sort Elt to RunState .
endv

fmod STACK is
    sort Stack .
endfm

view Stack from TRIV to STACK is
    sort Elt to Stack .
endv


mod TOH is

    pr QID .
    sort PegId .
    subsort PegId < Qid .
    ops a b c : -> PegId [ctor] .

    inc NAT .
    inc STACK .
    inc LIST{Nat} .
    op [_,_] : PegId List{Nat} -> Stack [ctor] .
    inc SET{Stack} .
    
    inc RUNSTATE .
    inc SET{RunState} .
 
    op <_> : Set{Stack} -> RunState [ctor] .
    op <_/_> : Set{Stack} Set{RunState} -> RunState [ctor] .

    vars PID1 PID2 : PegId .
    vars PILE1 PILE2 : List{Nat} .
    vars STACK3 : Stack .
    var H : Set{RunState} .

    crl [move-to-empty] :
	< [ PID1 , PILE1 ] , [ PID2 , nil ] , STACK3 / 
          H > 
    =>
        < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3  /
          H , < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3 > >
    if
        size(PILE1) > 0 /\ 
	not < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3 > in  H .

    crl [move-to-bigger] :
	< [ PID1 , PILE1 ] , [ PID2 , PILE2 ] , STACK3 / 
          H > 
    =>
        < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 /
          H , < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 > >
    if
        size(PILE1) > 0 /\ 
	head(PILE1) < head(PILE2) /\ 
	not < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 > in H .

endm

mod TOH-PREDS is

    pr TOH .
    inc SATISFACTION .

    subsort RunState < State .

    var RUNSTATE : RunState .
    var STACK : Stack .
    var PROP : Prop .
    var H : Set{RunState} .
    op solved : -> Prop .
    eq < [ a , nil ] , STACK , [ c , nil ] / H > |= solved = true .
    eq RUNSTATE |= PROP = false [owise] .

endm

mod TOH-CHECK is

    pr TOH-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .

    --- initial state: all X disk(s) on leftmost peg:
    op initial2 : -> State .
    eq initial2 = < [ a , 1 2 ] , [ b , nil ] , [ c , nil ] / empty > .
    op initial3 : -> State .
    eq initial3 = < [ a , 1 2 3 ] , [ b , nil ] , [ c , nil ] / empty > .


endm

*** red modelCheck( initial2, [] ~ solved ) .
*** red modelCheck( initial2, ~ <> solved ) .

*** sample runs:
*** NOTE: output truncated: removed H (history tracking) + rule labels

*** Maude> red modelCheck( initial2, [] ~ solved ) .
*** reduce in TOH-CHECK : modelCheck(initial2, []~ solved) .
*** rewrites: 319
*** result ModelCheckResult: counterexample(
***     {< [a,1 2], [b,nil], [c,nil] 
***     {< [a,2], [b,1], [c,nil] 
***     {< [a,nil], [b,1], [c,2] 
***     {< [a,1], [b,nil], [c,2] 
***     {< [a,1], [b,2], [c,nil] 
***     {< [a,nil], [b,2], [c,1] 
***     {< [a,nil], [b,1 2], [c,nil]   <---- solution


*** Maude> red modelCheck( initial3, [] ~ solved ) .
*** reduce in TOH-CHECK : modelCheck(initial3, []~ solved) .
*** rewrites: 1527
*** result ModelCheckResult: counterexample(
***     {< [a,1 2 3], [b,nil], [c,nil] 
***     {< [a,2 3], [b,1], [c,nil] 
***     {< [a,3], [b,1], [c,2] 
***     {< [a,1 3], [b,nil], [c,2] 
***     {< [a,1 3], [b,2], [c,nil] 
***     {< [a,3], [b,2], [c,1] 
***     {< [a,3], [b,1 2], [c,nil] 
***     {< [a,nil], [b,1 2], [c,3] 
***     {< [a,1], [b,2], [c,3] 
***     {< [a,nil], [b,2], [c,1 3] 
***     {< [a,2], [b,nil], [c,1 3] 
***     {< [a,2], [b,1], [c,3] 
***     {< [a,1 2], [b,nil], [c,3] 
***     {< [a,1 2], [b,3], [c,nil] 
***     {< [a,2], [b,3], [c,1] 
***     {< [a,nil], [b,2 3], [c,1] 
***     {< [a,1], [b,2 3], [c,nil] 
***     {< [a,nil], [b,1 2 3], [c,nil]  <--- solution


*** ANALYSIS:
*** due to history tracking, the last state reached actually shows 'deadlock':
*** untruuncated last state:

*** {< [a,nil], [b,1 2 3], [c,nil] / < [a,nil], [b,2], [c,1 3] >, < [a,nil], [b,1 2], [c,3] >, < [a,nil], [b,2 3], [c,1] >, < [a,nil], [b,1 2 3], [c,nil] >, < [a,1], [b,2], [c,3] >, < [a,1], [b,2 3], [c,nil] >, < [a,2], [b,nil], [c,1 3] >, < [a,2], [b,1], [c,3] >, < [a,2], [b,3], [c,1] >, < [a,3], [b,1], [c,2] >, < [a,3], [b,2], [c,1] >, < [a,3], [b,1 2], [c,nil] >, < [a,1 2], [b,nil], [c,3] >, < [a,1 2], [b,3], [c,nil] >, < [a,1 3], [b,nil], [c,2] >, < [a,1 3], [b,2], [c,nil] >, < [a,2 3], [b,1], [c,nil] > >,deadlock})

*** this is due to state history tracking: earlier visited states a prevented from being visited again => the state machine does not allow for circular paths.
*** this actually helps us: the full counter exanmple IS a valid path to the solution state!

*** but note that as no strategy except the avoidance of earlier states is implemented / used, the solution path in not guaranteed to be the shortest path
