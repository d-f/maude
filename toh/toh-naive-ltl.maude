***
*** Tower Of Hanoi
***
*** LTL version - based on naive search
*** 
*** E.Honing oct 2013
***
in model-checker.maude

mod TOH is

    inc NAT .
    pr LIST{Nat} .

    sort RunState .

    op <_,_,_> : List{Nat} List{Nat} List{Nat} -> RunState [ctor] .

    vars PA PB PC : List{Nat} .

    crl [a-to-b1] : < PA , nil , PC >  =>  < tail(PA) , head(PA) , PC >  
	if  size(PA) > 0 .
    crl [a-to-b2] : < PA , PB , PC >  =>  < tail(PA) , (head(PA) PB) , PC >  
	if  size(PA) > 0 /\ head(PA) < head(PB) .

    crl [b-to-a1] : < nil , PB , PC >  =>  < head(PB) , tail(PB) , PC > 
	if  size(PB) > 0 .
    crl [b-to-a2] : < PA , PB , PC >  =>  < (head(PB) PA) , tail(PB) , PC > 
	if  size(PB) > 0 /\ head(PB) < head(PA) .

    crl [b-to-c1] : < PA , PB , nil >  =>  < PA , tail(PB) , head(PB) > 
	if  size(PB) > 0 .
    crl [b-to-c2] : < PA , PB , PC >  =>  < PA , tail(PB) , (head(PB) PC) > 
	if  size(PB) > 0 /\ head(PB) < head(PC) .

    crl [c-to-b1] : < PA , nil , PC >  =>  < PA , head(PC) , tail(PC) > 
	if  size(PC) > 0 .
    crl [c-to-b2] : < PA , PB , PC >  =>  < PA , (head(PC) PB) , tail(PC) > 
	if  size(PC) > 0 /\ head(PC) < head(PB) .

    crl [c-to-a1] : < nil , PB , PC >  =>  < head(PC) , PB , tail(PC) > 
	if  size(PC) > 0 .
    crl [c-to-a2] : < PA , PB , PC >  =>  < (head(PC) PA) , PB , tail(PC) > 
	if  size(PC) > 0 /\ head(PC) < head(PA) .

    crl [a-to-c1] : < PA , PB , nil >  =>  < tail(PA) , PB , head(PA) > 
	if  size(PA) > 0 .
    crl [a-to-c2] : < PA , PB , PC >  =>  < tail(PA) , PB , (head(PA) PC) > 
	if  size(PA) > 0 /\ head(PA) < head(PC) .

endm

mod TOH-PREDS is

    pr TOH .
    inc SATISFACTION .

    subsort RunState < State .

    var RUNSTATE : RunState .
    vars PILE1 PILE2 PILE3 : List{Nat} .
    var PROP : Prop .

    op solved : -> Prop .
    eq < nil , PILE2 , nil > |= solved = true .
    eq RUNSTATE |= PROP = false [owise] .

endm

mod TOH-CHECK is

    pr TOH-PREDS .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .

    --- initial state: all 2 disk(s) on leftmost peg:
    op initial2 : -> State .
    eq initial2 = < (1 2) , nil , nil > .
    op initial3 : -> State .
    eq initial3 = < (1 2 3) , nil , nil > .

endm

*** red modelCheck( initial2, [] ~ solved ) .
*** red modelCheck( initial2, ~ <> solved ) .

*** sample runs:

*** Maude> red modelCheck( initial2 , [] ~ solved ) .
*** reduce in TOH-CHECK : modelCheck(initial2, []~ solved) .
*** rewrites: 220
*** result ModelCheckResult: counterexample(
***     {< 1 2,nil,nil >,    'a-to-b1} 
***     {< 2,1,nil >,        'b-to-c1}     cycle
***     {< 2,nil,1 >,        'a-to-b1} <------------
***     {< nil,2,1 >,        'c-to-b2}              |
***     {< nil,1 2,nil >,    'b-to-a1} <-- solution |
***     {< 1,2,nil >,        'b-to-c1}              |
***     {< 1,nil,2 >,        'a-to-b1},             |
***     {< nil,1,2 >,        'b-to-c2}              |
***     {< nil,nil,1 2 >,    'c-to-b1}) ------------
*** Maude> 



*** Maude> red modelCheck( initial3 , [] ~ solved ) .
*** reduce in TOH-CHECK : modelCheck(initial3, []~ solved) .
*** rewrites: 479
*** result ModelCheckResult: counterexample(   cycle
***     {< 1 2 3,nil,nil >,  'a-to-b1} <------------
*** 	{< 2 3,1,nil >,      'b-to-c1}              |
*** 	{< 2 3,nil,1 >,      'a-to-b1}              |
*** 	{< 3,2,1 >,          'c-to-b2}              |
*** 	{< 3,1 2,nil >,      'b-to-a2}              |
*** 	{< 1 3,2,nil >,      'b-to-c1}              |
*** 	{< 1 3,nil,2 >,      'a-to-b1}              |
*** 	{< 3,1,2 >,          'b-to-c2}              |
*** 	{< 3,nil,1 2 >,      'a-to-b1}              |
*** 	{< nil,3,1 2 >,      'c-to-b2}              |
*** 	{< nil,1 3,2 >,      'b-to-a1}              |
*** 	{< 1,3,2 >,          'c-to-b2}              |
*** 	{< 1,2 3,nil >,      'a-to-b2}              |
*** 	{< nil,1 2 3,nil >,  'b-to-a1} <-- solution |
*** 	{< 1,2 3,nil >,      'b-to-c1}              |
*** 	{< 1,3,2 >,          'a-to-b2}              |
*** 	{< nil,1 3,2 >,      'b-to-c2}              |
*** 	{< nil,3,1 2 >,      'b-to-a1}              |
*** 	{< 3,nil,1 2 >,      'c-to-b1}              |
*** 	{< 3,1,2 >,          'b-to-a2}              |
*** 	{< 1 3,nil,2 >,      'c-to-b1}              |
*** 	{< 1 3,2,nil >,      'a-to-b2}              |
*** 	{< 3,1 2,nil >,      'b-to-c1}              |
*** 	{< 3,2,1 >,          'b-to-a2}              |
*** 	{< 2 3,nil,1 >,      'c-to-b1},             |
*** 	{< 2 3,1,nil >,      'b-to-a2}              |
*** 	{< 1 2 3,nil,nil >,  'a-to-b1}) ------------ 
*** Maude> 