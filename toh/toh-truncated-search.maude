***
*** Tower Of Hanoi
***
*** search version
***
*** note: "search optimization" strategy functionality: past state recording
*** also: using set represenatation approach to Peg / Pile representation to
*** reduce number of transformation rules
*** 
*** E.Honing oct 2013
***

fmod STATE is
    sort State .
endfm

view State from TRIV to STATE is
    sort Elt to State .
endv

fmod STACK is
    sort Stack .
endfm

view Stack from TRIV to STACK is
    sort Elt to Stack .
endv

mod TOH is

    pr QID .
    sort PegId .
    subsort PegId < Qid .
    ops a b c : -> PegId [ctor] .

    sort Path .
    op nilp : -> Path .
    op [_,_] : PegId PegId -> Path [ctor] .
    op __ : Path Path -> Path [assoc id: nilp] .

    inc NAT .
    inc STACK .
    inc LIST{Nat} .
    op [_,_] : PegId List{Nat} -> Stack [ctor] .
    inc SET{Stack} .
    
    inc STATE .
    inc SET{State} .
 
    op <_> : Set{Stack} -> State [ctor] .
    op <_/_/_> : Set{Stack} Path Set{State} -> State [ctor] .

    vars PID1 PID2 : PegId .
    vars PILE1 PILE2 : List{Nat} .
    vars STACK3 : Stack .
    var P : Path .
    var H : Set{State} .

    crl [move-to-empty] :
	< [ PID1 , PILE1 ] , [ PID2 , nil ] , STACK3 / 
          P / 
          H > 
    =>
        < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3  /
          P [ PID1 , PID2 ] /
          H , < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3 > >
    if
        size(PILE1) > 0 /\ 
	not < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) ] , STACK3 > in  H .

    crl [move-to-bigger] :
	< [ PID1 , PILE1 ] , [ PID2 , PILE2 ] , STACK3 / 
          P / 
          H > 
    =>
        < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 /
          P [ PID1 , PID2 ] /
          H , < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 > >
    if
        size(PILE1) > 0 /\ 
	head(PILE1) < head(PILE2) /\ 
	not < [ PID1 , tail(PILE1) ] , [ PID2 , head(PILE1) PILE2 ] , STACK3 > in H .

endm

mod TST-TOH is
    inc TOH .

    var S : Stack .
    var P : Path .
    var H : Set{State} .

    op initial1 : -> State .
    eq initial1 = < [ a , 1 ] , [ b , nil ] , [ c , nil ] / nilp / empty > .
    op initial2 : -> State .
    eq initial2 = < [ a , 1 2 ] , [ b , nil ] , [ c , nil ] / nilp / empty > .
    op initial3 : -> State .
    eq initial3 = < [ a , 1 2 3 ] , [ b , nil ] , [ c , nil ] / nilp / empty > .
    op initial4 : -> State .
    eq initial4 = < [ a , 1 2 3 4 ] , [ b , nil ] , [ c , nil ] / nilp / empty > .
endm

*** search[1] in TST-TOH : initial2 =>* < [a,nil] , S , [c,nil] / P / H > .
*** search[1] in TST-TOH : initial3 =>* < [a,nil] , S , [c,nil] / P / H > .
*** search[1] in TST-TOH : initial4 =>* < [a,nil] , S , [c,nil] / P / H > .


*** sme search runs:

*** ==========================================
*** mod TST-TOH
*** Maude> search[1] in TST-TOH : initial2 =>* < [a,nil] , S , [c,nil] / P / H > .
*** search in TST-TOH : initial2 =>* < S, [a,nil], [c,nil] / P / H > .

*** Solution 1 (state 15)
*** states: 16  rewrites: 422
*** S --> [b,1 2]
*** P --> [a,c] [a,b] [c,b]
*** H --> < [a,nil], [b,2], [c,1] >, < [a,nil], [b,1 2], [c,nil] >, < [a,2], [b,nil], [c,1] >
*** Maude> search[1] in TST-TOH : initial3 =>* < [a,nil] , S , [c,nil] / P / H > .
*** search in TST-TOH : initial3 =>* < S, [a,nil], [c,nil] / P / H > .

*** Solution 1 (state 112)
*** states: 113  rewrites: 4205
*** S --> [b,1 2 3]
*** P --> [a,b] [a,c] [b,c] [a,b] [c,a] [c,b] [a,b]
*** H --> < [a,nil], [b,3], [c,1 2] >, < [a,nil], [b,1 2 3], [c,nil] >, < [a,1], [b,3], [c,2] >, < [a,1], [b,2 3], [c,nil] >, < [a,3], [b,nil], [c,1 2] >, < [a,3], [b,1], [c,2] >, < [a,2 3], [b,1], [c,nil] >
*** Maude> search[1] in TST-TOH : initial4 =>* < [a,nil] , S , [c,nil] / P / H > .
*** search in TST-TOH : initial4 =>* < S, [a,nil], [c,nil] / P / H > .

*** Solution 1 (state 9183)
*** states: 9184  rewrites: 377388
*** S --> [b,1 2 3 4]
*** P --> [a,c] [a,b] [c,b] [a,c] [b,a] [b,c] [a,c] [a,b] [c,b] [c,a] [b,a] [c,b] [a,c] [a,b] [c,b]
*** H --> < [a,nil], [b,4], [c,1 2 3] >, < [a,nil], [b,1 4], [c,2 3] >, < [a,nil], [b,2 3 4], [c,1] >, < [a,nil], [b,1 2 3 4], [c,nil] >, < [a,2], [b,1 4], [c,3] >, < [a,2], [b,3 4], [c,1] >, < [a,4], [b,nil], [c,1 2 3] >, < [a,4], [b,1 2], [c,3] >, < [a,1 2], [b,4], [c,3] >, < [a,1 2], [b,3 4], [c,nil] >, < [a,1 4], [b,nil], [c,2 3] >, < [a,1 4], [b,2], [c,3] >, < [a,3 4], [b,2], [c,1] >, < [a,3 4], [b,1 2], [c,nil] >, < [a,2 3 4], [b,nil], [c,1] >
*** Maude> 